note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class NGHTTP2_VEC_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	base:  detachable STRING
			-- Access member `base`
		require
			exists: exists
		do
			if attached c_base (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_base (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_base (a_value: STRING) 
			-- Change the value of member `base` to `a_value`.
		require
			exists: exists
		do
			set_c_base (item, (create {C_STRING}.make (a_value)).item )
		end

	len: INTEGER
			-- Access member `len`
		require
			exists: exists
		do
			Result := c_len (item)
		ensure
			result_correct: Result = c_len (item)
		end

	set_len (a_value: INTEGER) 
			-- Change the value of member `len` to `a_value`.
		require
			exists: exists
		do
			set_c_len (item, a_value)
		ensure
			len_set: a_value = len
		end

feature {NONE} -- Implementation wrapper for struct nghttp2_vec

	sizeof_external: INTEGER 
		external
			"C inline use <nghttp2.h>"
		alias
			"sizeof(nghttp2_vec)"
		end

	c_base (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_vec*)$an_item)->base
			]"
		end

	set_c_base (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_vec*)$an_item)->base =  (uint8_t*)$a_value
			]"
		ensure
			base_set: a_value = c_base (an_item)
		end

	c_len (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_vec*)$an_item)->len
			]"
		end

	set_c_len (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_vec*)$an_item)->len =  (size_t)$a_value
			]"
		ensure
			len_set: a_value = c_len (an_item)
		end

end
