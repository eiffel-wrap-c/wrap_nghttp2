note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class NGHTTP2_NV_STRUCT_API

inherit

	MEMORY_STRUCTURE


create

	make,
	make_by_pointer,
	make_nv

feature {NONE} -- Initialization

	make_nv (a_name: STRING; a_value: STRING)
		do
			make
			set_name (a_name)
			set_value (a_value)
			set_flags ({NGHTTP2_NV_FLAG_ENUM_API}.nghttp2_nv_flag_none)
		end

feature -- Measurement

	structure_size: INTEGER
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	name:  detachable STRING
			-- Access member `name`
		require
			exists: exists
		do
			if attached c_name (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_name (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_name (a_value: STRING)
			-- Change the value of member `name` to `a_value`.
		require
			exists: exists
		do
			set_c_name (item, (create {C_STRING}.make (a_value)).item )
			set_c_namelen (item, a_value.count)
		end

	value:  detachable STRING
			-- Access member `value`
		require
			exists: exists
		do
			if attached c_value (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_value (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_value (a_value: STRING)
			-- Change the value of member `value` to `a_value`.
		require
			exists: exists
		do
			set_c_value (item, (create {C_STRING}.make (a_value)).item )
			set_c_valuelen (item, a_value.count)
		end

	namelen: INTEGER
			-- Access member `namelen`
		require
			exists: exists
		do
			Result := c_namelen (item)
		ensure
			result_correct: Result = c_namelen (item)
		end

	valuelen: INTEGER
			-- Access member `valuelen`
		require
			exists: exists
		do
			Result := c_valuelen (item)
		ensure
			result_correct: Result = c_valuelen (item)
		end

	flags: INTEGER
			-- Access member `flags`
		require
			exists: exists
		do
			Result := c_flags (item)
		ensure
			result_correct: Result = c_flags (item)
		end

	set_flags (a_value: INTEGER)
			-- Change the value of member `flags` to `a_value`.
		require
			exists: exists
			valid_flag: (create {NGHTTP2_NV_FLAG_ENUM_API}).is_valid_enum (a_value)
		do
			set_c_flags (item, a_value)
		ensure
			flags_set: a_value = flags
		end

feature {NONE} -- Implementation wrapper for struct nghttp2_nv

	sizeof_external: INTEGER
		external
			"C inline use <nghttp2.h>"
		alias
			"sizeof(nghttp2_nv)"
		end

	c_name (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_nv*)$an_item)->name
			]"
		end

	set_c_name (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_nv*)$an_item)->name =  (uint8_t*)$a_value
			]"
		ensure
			name_set: a_value = c_name (an_item)
		end

	c_value (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_nv*)$an_item)->value
			]"
		end

	set_c_value (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_nv*)$an_item)->value =  (uint8_t*)$a_value
			]"
		ensure
			value_set: a_value = c_value (an_item)
		end

	c_namelen (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_nv*)$an_item)->namelen
			]"
		end

	set_c_namelen (an_item: POINTER; a_value: INTEGER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_nv*)$an_item)->namelen =  (size_t)$a_value
			]"
		ensure
			namelen_set: a_value = c_namelen (an_item)
		end

	c_valuelen (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_nv*)$an_item)->valuelen
			]"
		end

	set_c_valuelen (an_item: POINTER; a_value: INTEGER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_nv*)$an_item)->valuelen =  (size_t)$a_value
			]"
		ensure
			valuelen_set: a_value = c_valuelen (an_item)
		end

	c_flags (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_nv*)$an_item)->flags
			]"
		end

	set_c_flags (an_item: POINTER; a_value: INTEGER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				((nghttp2_nv*)$an_item)->flags =  (uint8_t)$a_value
			]"
		ensure
			flags_set: a_value = c_flags (an_item)
		end

	c_make_nv (an_item: POINTER; an_value: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
			an_value_not_null: an_value /= default_pointer
		external
			"C inline use <nghttp2.h>"
		alias
			"[
				nghttp2_nv nv; 
				nghttp2_nv *p = malloc(sizeof(nghttp2_nv));
				p->name =  (uint8_t *)$an_item;
				p->value = (uint8_t *)$an_value;
				p->namelen = sizeof($an_item) - 1; 
				p->valuelen =sizeof($an_value) - 1; 
				p->flags = NGHTTP2_NV_FLAG_NONE ;
				return p;
			]"
		end


end
